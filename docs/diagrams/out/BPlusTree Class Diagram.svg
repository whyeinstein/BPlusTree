<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="1825px" preserveAspectRatio="none" style="width:857px;height:1825px;background:#FFFFFF;" version="1.1" viewBox="0 0 857 1825" width="857px" zoomAndPan="magnify"><defs/><g><!--MD5=[3fee75583bb7a64f68d843a3c9534ab3]
class Node--><g id="elem_Node"><rect codeLine="1" fill="#F1F1F1" height="473.4781" id="Node" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="329" x="280.76" y="1345"/><ellipse cx="423.51" cy="1361" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M426.4788,1366.6406 Q425.9006,1366.9375 425.26,1367.0859 Q424.6194,1367.2344 423.9163,1367.2344 Q421.4163,1367.2344 420.0959,1365.5859 Q418.7756,1363.9375 418.7756,1360.8125 Q418.7756,1357.6875 420.0959,1356.0313 Q421.4163,1354.375 423.9163,1354.375 Q424.6194,1354.375 425.2678,1354.5313 Q425.9163,1354.6875 426.4788,1354.9844 L426.4788,1357.7031 Q425.8538,1357.125 425.26,1356.8516 Q424.6663,1356.5781 424.0413,1356.5781 Q422.6975,1356.5781 422.01,1357.6484 Q421.3225,1358.7188 421.3225,1360.8125 Q421.3225,1362.9063 422.01,1363.9766 Q422.6975,1365.0469 424.0413,1365.0469 Q424.6663,1365.0469 425.26,1364.7734 Q425.8538,1364.5 426.4788,1363.9219 L426.4788,1366.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="35" x="444.01" y="1367.1006">Node</text><line style="stroke:#181818;stroke-width:0.5;" x1="281.76" x2="608.76" y1="1377" y2="1377"/><polygon fill="none" points="291.76,1387.6304,295.76,1391.6304,291.76,1395.6304,287.76,1391.6304" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="300.76" y="1397.2311">m_Count:int</text><polygon fill="none" points="291.76,1407.8913,295.76,1411.8913,291.76,1415.8913,287.76,1411.8913" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="300.76" y="1417.4919">nodeType:int</text><polygon fill="none" points="291.76,1428.1522,295.76,1432.1522,291.76,1436.1522,287.76,1432.1522" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="300.76" y="1437.7528">m_Father:Node*</text><polygon fill="none" points="291.76,1448.413,295.76,1452.413,291.76,1456.413,287.76,1452.413" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="300.76" y="1458.0137">m_KeyValues:vector&lt;T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="281.76" x2="608.76" y1="1466.0435" y2="1466.0435"/><ellipse cx="291.76" cy="1481.6739" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="300.76" y="1486.2745">Node();</text><ellipse cx="291.76" cy="1501.9348" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="61" x="300.76" y="1506.5354">~Node(){}</text><ellipse cx="291.76" cy="1522.1956" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="94" x="300.76" y="1526.7963">GetCount():int</text><ellipse cx="291.76" cy="1542.4565" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="300.76" y="1547.0571">SetCount(int i):void</text><ellipse cx="291.76" cy="1562.7173" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="300.76" y="1567.318">GetFather():Node*</text><ellipse cx="291.76" cy="1582.9782" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="191" x="300.76" y="1587.5789">SetFather(Node* father):void</text><ellipse cx="291.76" cy="1603.2391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122" x="300.76" y="1607.8397">GetNodeType():int</text><ellipse cx="291.76" cy="1623.4999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="300.76" y="1628.1006">SetNodeType(int i):void</text><ellipse cx="291.76" cy="1643.7608" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="300.76" y="1648.3615">GetKeyValue(int i):T</text><ellipse cx="291.76" cy="1664.0217" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="300.76" y="1668.6223">SetKeyValue(int i, T key):void</text><ellipse cx="291.76" cy="1684.2825" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="300.76" y="1688.8832">ReplaceKeyValue(int i, T key):void</text><ellipse cx="291.76" cy="1704.5434" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="303" x="300.76" y="1709.144">GetBro(int&amp; leftOrRight, int ORDER):Node&lt;T&gt;*</text><ellipse cx="291.76" cy="1724.8043" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="300.76" y="1729.4049">SetChild(int i, Node* pointer):void</text><ellipse cx="291.76" cy="1745.0651" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="300.76" y="1749.6658">GetChild(int i):Node&lt;T&gt;*</text><ellipse cx="291.76" cy="1765.326" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="300.76" y="1769.9266">GetRightBro():Node&lt;T&gt;*</text><ellipse cx="291.76" cy="1785.5869" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="300.76" y="1790.1875">GetLeftBro():Node&lt;T&gt;*</text><ellipse cx="291.76" cy="1805.8477" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="300.76" y="1810.4484">GetValues(int i):T</text></g><!--MD5=[d6a8e8e7ec73b9d40b860dcdb4144eea]
class InterNode--><g id="elem_InterNode"><rect codeLine="25" fill="#F1F1F1" height="250.6086" id="InterNode" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="550" x="255.26" y="7"/><ellipse cx="493.01" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M495.9788,28.6406 Q495.4006,28.9375 494.76,29.0859 Q494.1194,29.2344 493.4163,29.2344 Q490.9163,29.2344 489.5959,27.5859 Q488.2756,25.9375 488.2756,22.8125 Q488.2756,19.6875 489.5959,18.0313 Q490.9163,16.375 493.4163,16.375 Q494.1194,16.375 494.7678,16.5313 Q495.4163,16.6875 495.9788,16.9844 L495.9788,19.7031 Q495.3538,19.125 494.76,18.8516 Q494.1663,18.5781 493.5413,18.5781 Q492.1975,18.5781 491.51,19.6484 Q490.8225,20.7188 490.8225,22.8125 Q490.8225,24.9063 491.51,25.9766 Q492.1975,27.0469 493.5413,27.0469 Q494.1663,27.0469 494.76,26.7734 Q495.3538,26.5 495.9788,25.9219 L495.9788,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="66" x="513.51" y="29.1006">InterNode</text><line style="stroke:#181818;stroke-width:0.5;" x1="256.26" x2="804.26" y1="39" y2="39"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="263.26" y="51.6304"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="275.26" y="59.2311">m_Childs:&lt;Node&lt;T&gt;*&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="256.26" x2="804.26" y1="67.2609" y2="67.2609"/><ellipse cx="266.26" cy="82.8913" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="87" x="275.26" y="87.4919">InterNode() {}</text><ellipse cx="266.26" cy="103.1522" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="275.26" y="107.7528">~InterNode() {}</text><ellipse cx="266.26" cy="123.413" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="275.26" y="128.0137">GetChild(int i):Node&lt;T&gt;*</text><ellipse cx="266.26" cy="143.6739" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="247" x="275.26" y="148.2745">Insert(T value, Node&lt;T&gt;* pNode):bool</text><ellipse cx="266.26" cy="163.9348" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="275.26" y="168.5354">SetChild(int i, Node&lt;T&gt;* pointer):void</text><ellipse cx="266.26" cy="184.1956" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="275.26" y="188.7963">Split(InterNode&lt;T&gt;* parentNode, T key, int MAX_KEYNUM, int ORDER,int&amp; flag):T</text><ellipse cx="266.26" cy="204.4565" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="117" x="275.26" y="209.0571">Delete(T key):void</text><ellipse cx="266.26" cy="224.7173" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="275.26" y="229.318">Combine(Node&lt;T&gt;* pNode):void</text><ellipse cx="266.26" cy="244.9782" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="275.26" y="249.5789">BorrowInterBro(InterNode&lt;T&gt;* pNode):bool</text></g><!--MD5=[66148af4ccdef8153c55d160aebad70b]
class LeafNode--><g id="elem_LeafNode"><rect codeLine="38" fill="#F1F1F1" height="351.913" id="LeafNode" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="300" x="295.26" y="933"/><ellipse cx="409.01" cy="949" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M411.9788,954.6406 Q411.4006,954.9375 410.76,955.0859 Q410.1194,955.2344 409.4163,955.2344 Q406.9163,955.2344 405.5959,953.5859 Q404.2756,951.9375 404.2756,948.8125 Q404.2756,945.6875 405.5959,944.0313 Q406.9163,942.375 409.4163,942.375 Q410.1194,942.375 410.7678,942.5313 Q411.4163,942.6875 411.9788,942.9844 L411.9788,945.7031 Q411.3538,945.125 410.76,944.8516 Q410.1663,944.5781 409.5413,944.5781 Q408.1975,944.5781 407.51,945.6484 Q406.8225,946.7188 406.8225,948.8125 Q406.8225,950.9063 407.51,951.9766 Q408.1975,953.0469 409.5413,953.0469 Q410.1663,953.0469 410.76,952.7734 Q411.3538,952.5 411.9788,951.9219 L411.9788,954.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="429.51" y="955.1006">LeafNode</text><line style="stroke:#181818;stroke-width:0.5;" x1="296.26" x2="594.26" y1="965" y2="965"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="303.26" y="977.6304"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="178" x="315.26" y="985.2311">m_RightBro:LeafNode&lt;T&gt;*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="303.26" y="997.8913"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="315.26" y="1005.4919">m_LeftBro:LeafNode&lt;T&gt;*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="303.26" y="1018.1522"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="315.26" y="1025.7528">m_Values:vector&lt;uint64_t&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="296.26" x2="594.26" y1="1033.7826" y2="1033.7826"/><ellipse cx="306.26" cy="1049.413" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="315.26" y="1054.0137">LeafNode()</text><ellipse cx="306.26" cy="1069.6739" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="315.26" y="1074.2745">~LeafNode()</text><ellipse cx="306.26" cy="1089.9348" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="315.26" y="1094.5354">GetRightBro():LeafNode&lt;T&gt;*</text><ellipse cx="306.26" cy="1110.1956" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="315.26" y="1114.7963">SetRightBro(LeafNode&lt;T&gt;* rightBro):void</text><ellipse cx="306.26" cy="1130.4565" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="182" x="315.26" y="1135.0571">GetLeftBro():LeafNode&lt;T&gt;*</text><ellipse cx="306.26" cy="1150.7173" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="257" x="315.26" y="1155.318">SetLeftBro(LeafNode&lt;T&gt;* leftBro):void</text><ellipse cx="306.26" cy="1170.9782" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="315.26" y="1175.5789">GetValues(int i):T</text><ellipse cx="306.26" cy="1191.2391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="315.26" y="1195.8397">SetValues(int i, T value):void</text><ellipse cx="306.26" cy="1211.4999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="315.26" y="1216.1006">Insert(T key, uint64_t):bool</text><ellipse cx="306.26" cy="1231.7608" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="315.26" y="1236.3615">Delete(T value):bool</text><ellipse cx="306.26" cy="1252.0217" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="315.26" y="1256.6223">Combine(Node&lt;T&gt;* pNode):void</text><ellipse cx="306.26" cy="1272.2825" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="315.26" y="1276.8832">Split(LeafNode&lt;T&gt;* pNode):T</text></g><!--MD5=[8eac7a77b34bebb45bb5a932e15e2fa1]
class BPlusTree--><g id="elem_BPlusTree"><rect codeLine="56" fill="#F1F1F1" height="554.5216" id="BPlusTree" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="640" x="210.26" y="318"/><ellipse cx="493.01" cy="334" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M495.9788,339.6406 Q495.4006,339.9375 494.76,340.0859 Q494.1194,340.2344 493.4163,340.2344 Q490.9163,340.2344 489.5959,338.5859 Q488.2756,336.9375 488.2756,333.8125 Q488.2756,330.6875 489.5959,329.0313 Q490.9163,327.375 493.4163,327.375 Q494.1194,327.375 494.7678,327.5313 Q495.4163,327.6875 495.9788,327.9844 L495.9788,330.7031 Q495.3538,330.125 494.76,329.8516 Q494.1663,329.5781 493.5413,329.5781 Q492.1975,329.5781 491.51,330.6484 Q490.8225,331.7188 490.8225,333.8125 Q490.8225,335.9063 491.51,336.9766 Q492.1975,338.0469 493.5413,338.0469 Q494.1663,338.0469 494.76,337.7734 Q495.3538,337.5 495.9788,336.9219 L495.9788,339.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="66" x="513.51" y="340.1006">BPlusTree</text><line style="stroke:#181818;stroke-width:0.5;" x1="211.26" x2="849.26" y1="350" y2="350"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="218.26" y="362.6304"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="197" x="230.26" y="370.2311">m_LeafHead:LeafNode&lt;foo&gt;*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="218.26" y="382.8913"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="187" x="230.26" y="390.4919">m_LeafTail:LeafNode&lt;foo&gt;*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="218.26" y="403.1522"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="230.26" y="410.7528">m_Root:Node&lt;foo&gt;*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="218.26" y="423.413"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="230.26" y="431.0137">MAX_KEYNUM:int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="218.26" y="443.6739"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="230.26" y="451.2745">ORDER:int</text><line style="stroke:#181818;stroke-width:0.5;" x1="211.26" x2="849.26" y1="459.3043" y2="459.3043"/><ellipse cx="221.26" cy="474.9348" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="230.26" y="479.5354">BPlusTree()</text><ellipse cx="221.26" cy="495.1956" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="230.26" y="499.7963">~BPlusTree()</text><ellipse cx="221.26" cy="515.4565" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="226" x="230.26" y="520.0571">Search(foo data, char* sPath):bool</text><ellipse cx="221.26" cy="535.7173" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="230.26" y="540.318">SearchLeafNode(foo key):LeafNode&lt;foo&gt;*</text><ellipse cx="221.26" cy="555.9782" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="311" x="230.26" y="560.5789">LeafNode&lt;foo&gt;* SearchDelNode(foo key, int&amp; i)</text><ellipse cx="221.26" cy="576.2391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="230.26" y="580.8397">Insert(foo key, uint64_t value):bool</text><ellipse cx="221.26" cy="596.4999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="514" x="230.26" y="601.1006">InsertInterNode(InterNode&lt;foo&gt;* pNode, foo key, Node&lt;foo&gt;* rightChild):bool</text><ellipse cx="221.26" cy="616.7608" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="141" x="230.26" y="621.3615">Delete(foo data):bool</text><ellipse cx="221.26" cy="637.0217" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="343" x="230.26" y="641.6223">DelInterNode(InterNode&lt;foo&gt;* pNode, foo key):bool</text><ellipse cx="221.26" cy="657.2825" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="342" x="230.26" y="661.8832">UpdateKey(foo key, Node&lt;foo&gt;* oldNode, int x):void</text><ellipse cx="221.26" cy="677.5434" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="614" x="230.26" y="682.144">BorrowLeafBro(LeafNode&lt;foo&gt;* oldNode, LeafNode&lt;foo&gt;* pBro, foo key,int leftOrRight):bool</text><ellipse cx="221.26" cy="697.8043" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="230.26" y="702.4049">DeleteAll():void</text><ellipse cx="221.26" cy="718.0651" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="262" x="230.26" y="722.6658">LevelTraversal(Node&lt;foo&gt;* pNode):void</text><ellipse cx="221.26" cy="738.326" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="230.26" y="742.9266">RangeQuery(foo minKey, foo maxKey):void</text><ellipse cx="221.26" cy="758.5869" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="230.26" y="763.1875">GetRoot():Node&lt;foo&gt;*</text><ellipse cx="221.26" cy="778.8477" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="209" x="230.26" y="783.4484">SetRoot(Node&lt;foo&gt;* root):void</text><ellipse cx="221.26" cy="799.1086" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="230.26" y="803.7092">SetMaxKey(int i):void</text><ellipse cx="221.26" cy="819.3694" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="230.26" y="823.9701">GetMaxKey():int</text><ellipse cx="221.26" cy="839.6303" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="230.26" y="844.231">SetMinKey(int i):void</text><ellipse cx="221.26" cy="859.8912" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="230.26" y="864.4918">GetMinKey():int</text></g><!--MD5=[9562d5affdde7b4799be293558a19c4d]
link LeafNode to BPlusTree--><g id="link_LeafNode_BPlusTree"><path codeLine="84" d="M487.24,932.9 C489.99,917.76 492.75,902.2 495.46,886.46 " fill="none" id="LeafNode-to-BPlusTree" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="497.73,873.21,492.7724,878.4467,495.6995,885.037,500.6571,879.8003,497.73,873.21" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4f0b26e27e74a84536887e354def1aa7]
link BPlusTree to LeafNode--><g id="link_BPlusTree_LeafNode"><path codeLine="89" d="M471.56,873.21 C468.55,891.71 465.66,910.07 462.95,927.89 " fill="none" id="BPlusTree-to-LeafNode" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="462.18,932.9,467.4966,924.6094,462.9371,927.9576,459.5888,923.3981,462.18,932.9" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[011a3b07a6761920014b942bc90cd2ad]
link InterNode to BPlusTree--><g id="link_InterNode_BPlusTree"><path codeLine="85" d="M518.78,258.25 C518.39,273.19 518.1,288.89 517.88,305 " fill="none" id="InterNode-to-BPlusTree" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="517.73,318,521.8022,312.0488,517.875,306.0009,513.8028,311.9521,517.73,318" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[3ba1bea75243752fc28c0ebf3b985657]
link BPlusTree to InterNode--><g id="link_BPlusTree_InterNode"><path codeLine="88" d="M543.51,318 C543.31,299.27 542.99,280.97 542.55,263.61 " fill="none" id="BPlusTree-to-InterNode" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="542.4,258.25,538.6587,267.3606,542.5428,263.248,546.6554,267.1321,542.4,258.25" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[fd3d68bdf75cd481909d4b175d6103d5]
link LeafNode to Node--><g id="link_LeafNode_Node"><path codeLine="86" d="M445.26,1285.2 C445.26,1298.12 445.26,1311.31 445.26,1324.58 " fill="none" id="LeafNode-to-Node" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="452.26,1324.77,445.26,1344.77,438.26,1324.77,452.26,1324.77" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f9f138526a9c2f2e3a4cd0de7b0bd139]
link InterNode to Node--><g id="link_InterNode_Node"><path codeLine="87" d="M255.1,246.96 C230.29,267.16 208.46,290.69 192.26,318 C6,631.87 160.23,1058.91 296.4,1327.1 " fill="none" id="InterNode-to-Node" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="302.65,1323.94,305.55,1344.93,290.19,1330.33,302.65,1323.94" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ec017b38091437927bc3e2711797944a]
link BPlusTree to Node--><g id="link_BPlusTree_Node"><path codeLine="90" d="M609.93,873.25 C634.64,1000.24 647.28,1151.85 612.26,1285 C607.46,1303.23 601.26,1321.52 594.07,1339.57 " fill="none" id="BPlusTree-to-Node" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="592.01,1344.66,599.0846,1337.808,593.8792,1340.0226,591.6647,1334.8172,592.01,1344.66" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[3a79d30cef860d8cb3a88d497f942133]
@startuml BPlusTree Class Diagram
class Node {
  #m_Count:int
  #nodeType:int
  #m_Father:Node*             
  #m_KeyValues:vector<T>  
  +Node();
  +~Node(){}  
  +GetCount():int 
  +SetCount(int i):void 
  +GetFather():Node* 
  +SetFather(Node* father):void 
  +GetNodeType():int 
  +SetNodeType(int i):void
  +GetKeyValue(int i):T
  +SetKeyValue(int i, T key):void
  +ReplaceKeyValue(int i, T key):void
  +GetBro(int& leftOrRight, int ORDER):Node<T>*
  +SetChild(int i, Node* pointer):void
  +GetChild(int i):Node<T>*
  +GetRightBro():Node<T>*
  +GetLeftBro():Node<T>*
  +GetValues(int i):T
}

class InterNode{
  -m_Childs:<Node<T>*>
  +InterNode() {}
  +~InterNode() {}
  +GetChild(int i):Node<T>* 
  +Insert(T value, Node<T>* pNode):bool
  +SetChild(int i, Node<T>* pointer):void
  +Split(InterNode<T>* parentNode, T key, int MAX_KEYNUM, int ORDER,int& flag):T
  +Delete(T key):void
  +Combine(Node<T>* pNode):void
  +BorrowInterBro(InterNode<T>* pNode):bool
}

class LeafNode {
  -m_RightBro:LeafNode<T>*         
  -m_LeftBro:LeafNode<T>*          
  -m_Values:vector<uint64_t>  
  +LeafNode()
  +~LeafNode()
  +GetRightBro():LeafNode<T>*
  +SetRightBro(LeafNode<T>* rightBro):void 
  +GetLeftBro():LeafNode<T>* 
  +SetLeftBro(LeafNode<T>* leftBro):void 
  +GetValues(int i):T 
  +SetValues(int i, T value):void 
  +Insert(T key, uint64_t):bool 
  +Delete(T value):bool 
  +Combine(Node<T>* pNode):void
  +Split(LeafNode<T>* pNode):T 
}

class BPlusTree{
  -m_LeafHead:LeafNode<foo>*
  -m_LeafTail:LeafNode<foo>*
  -m_Root:Node<foo>*         
  -MAX_KEYNUM:int             
  -ORDER:int                  
  +BPlusTree()
  +~BPlusTree()
  +Search(foo data, char* sPath):bool 
  +SearchLeafNode(foo key):LeafNode<foo>*
  +LeafNode<foo>* SearchDelNode(foo key, int& i)  
  +Insert(foo key, uint64_t value):bool
  +InsertInterNode(InterNode<foo>* pNode, foo key, Node<foo>* rightChild):bool
  +Delete(foo data):bool
  +DelInterNode(InterNode<foo>* pNode, foo key):bool
  +UpdateKey(foo key, Node<foo>* oldNode, int x):void
  +BorrowLeafBro(LeafNode<foo>* oldNode, LeafNode<foo>* pBro, foo key,int leftOrRight):bool
  +DeleteAll():void
  +LevelTraversal(Node<foo>* pNode):void
  +RangeQuery(foo minKey, foo maxKey):void
  +GetRoot():Node<foo>*
  +SetRoot(Node<foo>* root):void
  +SetMaxKey(int i):void
  +GetMaxKey():int
  +SetMinKey(int i):void
  +GetMinKey():int
}

 LeafNode - -* BPlusTree
 InterNode - -* BPlusTree
 LeafNode- -|>Node
 InterNode- -|>Node
 BPlusTree..>InterNode
 BPlusTree..>LeafNode
 BPlusTree..>Node

@enduml

PlantUML version 1.2022.7(Tue Aug 23 01:01:30 CST 2022)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: UTF-8
Language: zh
Country: CN
--></g></svg>